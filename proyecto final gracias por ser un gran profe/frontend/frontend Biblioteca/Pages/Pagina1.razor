@page "/Estudiantes"

@inject HttpClient _client;

@using System.Net.Http.Json
@using Biblioteca.Api.Modelo
@using frontend_Biblioteca.Data
<MudButton OnClick="(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" Color="Color.Primary">Añadir</MudButton>

<MudDataGrid T="Estudiante" Items="@Estudiantes" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
			 StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
			 Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
	<Columns>
		<Column T="Estudiante" Field="ID" Title="Id" IsEditable="false" />
		<Column T="Estudiante" Field="@nameof(Estudiante.Nombre)" />
		<Column T="Estudiante" Field="@nameof(Estudiante.Carrera)" />
		<Column T="Estudiante" Field="@nameof(Estudiante.Semestre)" />
		<Column T="Estudiante" Field="@nameof(Estudiante.Prestamos)" Title="Prestamos" />
		<Column T="Estudiante" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
			<CellTemplate>
				<MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
				<MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> EliminarEvento(context.Item)" />
			</CellTemplate>
		</Column>
	</Columns>
</MudDataGrid>



@code {
	private IEnumerable<Estudiante> Estudiantes = new List<Estudiante>();
	private bool _readOnly;
	private bool _isCellEditMode;
	private List<string> _events = new();
	private bool _editTriggerRowClick;

	protected override async Task OnInitializedAsync()
	{
		try
		{

			var elemento = new List<Estudiante>();
			_client.BaseAddress = new Uri("https://localhost:7174/");

			var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarEstudiante");
			var respuesta = await _client.SendAsync(requestMessage);

			if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
			{
				var responseBody = await respuesta.Content.ReadAsStringAsync();
				var listasEstudiante = System.Text.Json.JsonSerializer.Deserialize<List<Estudiante>>(responseBody);
				Estudiantes = listasEstudiante;
			}
			await InvokeAsync(StateHasChanged);

		}
		catch (Exception es)
		{

		}


	}

	void EliminarEvento(Estudiante item)
	{
		((List<Estudiante>)Estudiantes).Remove(item);
		StateHasChanged();
	}

	void AgregarNuevoRegistro()
	{
		var elemento = new Estudiante
			{
				ID = 0,
				Nombre = "ANTONIO",
				Carrera = "AÑAÑAI",
				Semestre = 4,
				Prestamos = 0 
			};
		((List<Estudiante>)Estudiantes).Add(elemento);
		StateHasChanged();
	}
	// events
	void StartedEditingItem(Estudiante item)
	{
		_events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}

	void CancelledEditingItem(Estudiante item)
	{
		_events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
	}
	//Este servirá para guardar o actualizar registros.
	void CommittedItemChanges(Estudiante item)
	{
		_events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
		StateHasChanged();
	}
}